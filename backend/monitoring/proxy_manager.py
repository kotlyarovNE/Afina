#!/usr/bin/env python3
"""
MIT Proxy Manager –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HTTP/HTTPS —Ç—Ä–∞—Ñ–∏–∫–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Linux –∏ Windows
"""

import subprocess
import sys
import time
import signal
import os
import platform
from pathlib import Path
from typing import Optional, Dict, Any
import threading
import webbrowser


class ProxyStatus:
    def __init__(self):
        self.is_running = False
        self.pid = None
        self.web_port = 8081
        self.proxy_port = 8080
        self.web_url = f"http://localhost:{self.web_port}"
        self.proxy_url = f"http://localhost:{self.proxy_port}"


class MITMProxyManager:
    def __init__(self, web_port: int = 8081, proxy_port: int = 8080):
        self.web_port = web_port
        self.proxy_port = proxy_port
        self.process: Optional[subprocess.Popen] = None
        self.status = ProxyStatus()
        self.status.web_port = web_port
        self.status.proxy_port = proxy_port
        
    def _check_mitmproxy_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ mitmproxy"""
        try:
            result = subprocess.run(['mitmdump', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def install_mitmproxy(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç mitmproxy —á–µ—Ä–µ–∑ pip"""
        try:
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ mitmproxy...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'mitmproxy'])
            print("‚úÖ mitmproxy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mitmproxy: {e}")
            return False
    
    def start(self, open_browser: bool = True) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç MIT Proxy —Å web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        if self.is_running():
            print("‚ö†Ô∏è MIT Proxy —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        if not self._check_mitmproxy_installed():
            print("üîß mitmproxy –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            if not self.install_mitmproxy():
                return False
        
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ mitmweb (web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            cmd = [
                'mitmweb',
                '--web-port', str(self.web_port),
                '--listen-port', str(self.proxy_port),
                '--set', 'web_open_browser=false',  # –ú—ã —Å–∞–º–∏ –æ—Ç–∫—Ä–æ–µ–º –±—Ä–∞—É–∑–µ—Ä
                '--set', 'confdir=~/.mitmproxy'
            ]
            
            print(f"üöÄ –ó–∞–ø—É—Å–∫ MIT Proxy...")
            print(f"üìç Web UI: http://localhost:{self.web_port}")
            print(f"üìç Proxy: http://localhost:{self.proxy_port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)
            for i in range(10):
                if self.process.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
                    stdout, stderr = self.process.communicate()
                    print(f"‚ùå MIT Proxy –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
                    print(f"STDOUT: {stdout}")
                    print(f"STDERR: {stderr}")
                    return False
                    
                time.sleep(1)
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞... ({i+1}/10)")
            
            self.status.is_running = True
            self.status.pid = self.process.pid
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if open_browser:
                threading.Timer(3.0, lambda: webbrowser.open(f"http://localhost:{self.web_port}")).start()
            
            print("‚úÖ MIT Proxy –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self._print_usage_instructions()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MIT Proxy: {e}")
            return False
    
    def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MIT Proxy"""
        if not self.is_running():
            print("‚ö†Ô∏è MIT Proxy –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        try:
            if self.process:
                # –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    self.process.kill()
                    self.process.wait()
                
                self.process = None
            
            self.status.is_running = False
            self.status.pid = None
            
            print("‚úÖ MIT Proxy –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MIT Proxy: {e}")
            return False
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏"""
        if not self.process:
            return False
        return self.process.poll() is None
    
    def get_status(self) -> ProxyStatus:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"""
        self.status.is_running = self.is_running()
        if self.process:
            self.status.pid = self.process.pid
        return self.status
    
    def _print_usage_instructions(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        print("\n" + "="*50)
        print("üìã –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ MIT PROXY")
        print("="*50)
        print(f"üåê Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{self.web_port}")
        print(f"üîó –ü—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å: localhost:{self.proxy_port}")
        print()
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê/–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTP/HTTPS –ø—Ä–æ–∫—Å–∏:")
        print(f"   - Host: localhost")
        print(f"   - Port: {self.proxy_port}")
        print()
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ö–°–ò:")
        
        system = platform.system()
        if system == "Darwin":  # macOS
            print("   macOS: System Preferences ‚Üí Network ‚Üí Advanced ‚Üí Proxies")
        elif system == "Windows":
            print("   Windows: Settings ‚Üí Network & Internet ‚Üí Proxy")
        elif system == "Linux":
            print("   Linux: System Settings ‚Üí Network ‚Üí Network Proxy")
        
        print()
        print("üîß –î–õ–Ø PYTHON REQUESTS:")
        print("   export HTTP_PROXY=http://localhost:8080")
        print("   export HTTPS_PROXY=http://localhost:8080")
        print()
        print("üîß –î–õ–Ø CURL:")
        print(f"   curl --proxy localhost:{self.proxy_port} https://api.openai.com")
        print()
        print("üìú –í web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ HTTP/HTTPS –∑–∞–ø—Ä–æ—Å—ã")
        print("="*50)


# Singleton instance
_manager_instance = None

def get_manager() -> MITMProxyManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton instance –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _manager_instance
    if _manager_instance is None:
        _manager_instance = MITMProxyManager()
    return _manager_instance


if __name__ == "__main__":
    """–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="MIT Proxy Manager")
    parser.add_argument('action', choices=['start', 'stop', 'status'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--web-port', type=int, default=8081,
                       help='–ü–æ—Ä—Ç –¥–ª—è web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    parser.add_argument('--proxy-port', type=int, default=8080,
                       help='–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏')
    parser.add_argument('--no-browser', action='store_true',
                       help='–ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    
    args = parser.parse_args()
    
    manager = MITMProxyManager(args.web_port, args.proxy_port)
    
    if args.action == 'start':
        success = manager.start(open_browser=not args.no_browser)
        if success:
            try:
                print("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                while manager.is_running():
                    time.sleep(1)
            except KeyboardInterrupt:
                manager.stop()
        sys.exit(0 if success else 1)
        
    elif args.action == 'stop':
        success = manager.stop()
        sys.exit(0 if success else 1)
        
    elif args.action == 'status':
        status = manager.get_status()
        print(f"Status: {'Running' if status.is_running else 'Stopped'}")
        if status.is_running:
            print(f"PID: {status.pid}")
            print(f"Web UI: {status.web_url}")
            print(f"Proxy: {status.proxy_url}")